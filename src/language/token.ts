export type TokenKind = Type | Keyword | Operator | Punctuation | Literal | Comment | Symbolic

export enum Type {
	VOID = 'VOID_TYPE',
	BOOL = 'BOOL_TYPE',
	STRING = 'STRING_TYPE',

	INT8 = 'INT8_TYPE',
	INT16 = 'INT16_TYPE',
	INT32 = 'INT32_TYPE',
	INT64 = 'INT64_TYPE',
	INT128 = 'INT128_TYPE',

	UINT8 = 'UINT8_TYPE',
	UINT16 = 'UINT16_TYPE',
	UINT32 = 'UINT32_TYPE',
	UINT64 = 'UINT64_TYPE',
	UINT128 = 'UINT128_TYPE',

	FLOAT32 = 'FLOAT32_TYPE',
	FLOAT64 = 'FLOAT64_TYPE',
}

export enum Keyword {
	LET = 'LET_KW',
	MUT = 'MUT_KW',
	FUNC = 'FUNC_KW',
	RETURN = 'RETURN_KW',
	IF = 'IF_KW',
	ELIF = 'ELIF_KW',
	ELSE = 'ELSE_KW',
	TRUE = 'TRUE_KW',
	FALSE = 'FALSE_KW',
}

export enum Operator {
	STRICT_COMP = 'STRICT_CMP_OP',
	EQUALITY_COMP = 'EQUALITY_CMP_OP',
	LESS_THAN_EQL = 'LESS_THAN_EQL_OP',
	GREATER_THAN_EQL = 'GREATER_THAN_EQL_OP',
	LESS_THAN = 'LESS_THAN_OP',
	GREATER_THAN = 'GREATER_THAN_OP',
	EXPONENTIAL = 'EXPONENTIATION_OP',
	ASSIGNMENT = 'ASSIGN_OP',
	PLUS = 'PLUS_OP',
	MINUS = 'MINUS_OP',
	MULTIPLY = 'MULTIPLY_OP',
	DIVIDE = 'DIVIDE_OP',
	MODULO = 'MODULO_OP',
	AND = 'AND_OP',
	OR = 'OR_OP',
}

export enum Punctuation {
	SEMICOLON = 'SEMI_PNC',
	COLON = 'COLON_PNC',
	COMMA = 'COMMA_PNC',
	OPEN_BRACE = 'O_BRACE_PNC',
	CLOSE_BRACE = 'C_BRACE_PNC',
	OPEN_PAREN = 'O_PAREN_PNC',
	CLOSE_PAREN = 'C_PAREN_PNC',
}

export enum Literal {
	STRING = 'STRING_LIT',
	NUMERIC = 'NUMERIC_LIT',
	FLOAT = 'FLOAT_LIT',
}

export enum Comment {
	SINGLE = 'SINGLE_COMMENT',
	MULTI = 'MULTI_COMMENT',
}

export enum Symbolic {
	IDENTIFIER = 'IDENTIFIER_SYM',
	EOF = 'EOF_SYM',
}
